import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class main {
    public static void main(String[] args) throws IOException {

        // we expect exactly one argument: the name of the input file
        if (args.length != 1) {
            System.err.println("\n");
            System.err.println("Impl Interpreter\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename = args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        ccLexer lex = new ccLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        ccParser parser = new ccParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        String result = interpreter.visit(parseTree);
        System.out.println("The result is: \n" + result);
    }
}

// We write an interpreter that ccements interface
// "ccVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// sccy a String.

class Interpreter extends AbstractParseTreeVisitor<String> implements ccVisitor<String> {
    @Override
    public String visitStart(ccParser.StartContext ctx) {

        return "<html><body>" + visitChildren(ctx) + "</body></html>";
    }

    @Override
    public String visitHardwareDeclaration(ccParser.HardwareDeclarationContext ctx) {
        return "\n<h1>" + ctx.name.getText() + "</h1>";
    }

    @Override
    public String visitUpdateDeclaration(ccParser.UpdateDeclarationContext ctx) {
        String result="";
        for (ccParser.UpdateContext updateCtx: ctx.updates){
            result += visitUpdate(updateCtx);
        }
        return result;
    }

    @Override
    public String visitUpdate(ccParser.UpdateContext ctx) {
        String expr="";
        expr = visit(ctx.e);
        return ctx.input.getText() + " &larr; " + expr + "<br>";
    }

    @Override
    public String visitSimulateDeclaration(ccParser.SimulateDeclarationContext ctx) {
        return "\n<ul>" + ctx.s.stream().map(this::visit).collect(Collectors.joining()) + "</ul>";
    }

    @Override
    public String visitSimulate(ccParser.SimulateContext ctx) {
        return "\n<li>" + ctx.input.getText() + " = " + ctx.value.getText() + "</li>";
    }

    @Override
    public String visitLatchesDeclaration(ccParser.LatchesDeclarationContext ctx) {
        return "Visited LatchesDeclaration";
    }

    @Override
    public String visitLatches(ccParser.LatchesContext ctx) {
        return "Visited Latches";
    }

    @Override
    public String visitInputDeclaration(ccParser.InputDeclarationContext ctx) {
        return "Visited InputDeclaration";
    }

    @Override
    public String visitOutputDeclaration(ccParser.OutputDeclarationContext ctx) {
        return "Visited OutputDeclaration";
    }

    @Override
    public String visitNot(ccParser.NotContext ctx) {
        return "!" + visit(ctx.e);
    }

    @Override
    public String visitSignal(ccParser.SignalContext ctx) {
        return ctx.getText();
    }

    @Override
    public String visitOr(ccParser.OrContext ctx) {
        return "Visited Or";
    }

    @Override
    public String visitAnd(ccParser.AndContext ctx) {
        return visit(ctx.e1) +"&&"+visit(ctx.e2);
    }

    @Override
    public String visitParen(ccParser.ParenContext ctx) {
        return "Visited Paren";
    }
    @Override
    public String visitChildren(RuleNode node) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < node.getChildCount(); i++) {
            String childVisitResult = visit(node.getChild(i));
            stringBuilder.append(childVisitResult);
        }
        return stringBuilder.toString();
    }
}

